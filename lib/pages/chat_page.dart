import 'package:chat_app/componets/chat_dubble.dart';import 'package:chat_app/services/auth/auth_service.dart';import 'package:chat_app/services/chat/chat_service.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter/widgets.dart';import 'package:intl/intl.dart';class ChatPage extends StatefulWidget {  final String receiverEmail;  final String receiverID;  final Timestamp? timestamp;  ChatPage({    super.key,    required this.receiverEmail,    required this.receiverID,    this.timestamp,  });  @override  State<ChatPage> createState() => _ChatPageState();}class _ChatPageState extends State<ChatPage> {  /* text Controller */  final TextEditingController _messageController = TextEditingController();  /* chat & auth services */  final ChatService _chatService = ChatService();  final AuthService _authService = AuthService();  /* for textfield focuse */  FocusNode myFocuseNode = FocusNode();  /* for emojis */  FocusNode _focusNode = FocusNode();  /*  for emoji  */  @override  void initState() {    super.initState();    /* add listener to focus node */    myFocuseNode.addListener(      () {        if (myFocuseNode.hasFocus) {          /* cause a delay so thar the keyword has time to show up */ /* them the amount of remaining space will be calculated */ /* then scrool down */ Future              .delayed(            const Duration(seconds: 2),            () => scrolDown(),          );        }      },    );  }  @override  void dispose() {    myFocuseNode.dispose();    _messageController.dispose();    super.dispose();  }  /* scroll controller */  final ScrollController _scrollController = ScrollController();  void scrolDown() {    _scrollController.animateTo(      _scrollController.position.maxScrollExtent,      duration: Duration(seconds: 1),      curve: Curves.fastOutSlowIn,    );  }  /* send message */  void sendMessage() async {    /* if there is something inside the textfield */ if (_messageController        .text.isNotEmpty) {      /* send the message */ await _chatService.sendMessage(          widget.receiverID, _messageController.text);      /*  clear text controller */      _messageController.clear();    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: Theme.of(context).colorScheme.background,      appBar: AppBar(        centerTitle: true,        title: Text(          // widget.receiverEmail.trimLeft(),          ('${widget.receiverEmail}'),          style: TextStyle(fontFamily: 'plusR'),        ),        backgroundColor: Colors.transparent,        foregroundColor: Colors.grey,        elevation: 0,      ),      body: Column(        children: <Widget>[          /* display all message */ Expanded(            child: _buildMessageList(),          ),          /* user input */ _buildUserInput(),        ],      ),    );  }  /* build message list */  Widget _buildMessageList() {    String senderID = _authService.getCurrentUser()!.uid;    return StreamBuilder(      stream: _chatService.getMessages(widget.receiverID, senderID),      builder: (context, snapshot) {        /* Error */ if (snapshot.hasError) {          return Text('Error');        }        /* loading */        if (snapshot.connectionState == ConnectionState.waiting) {          return Text('Loading...');        }        /* return list view */        return ListView(          controller: _scrollController,          children:              snapshot.data!.docs.map((doc) => _buildMessageItem(doc)).toList(),        );      },    );  }  /* build message item */  Widget _buildMessageItem(DocumentSnapshot doc) {    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;    /* is current user */    bool isCurrentUser = data["senderID"] == _authService.getCurrentUser()!.uid;    /* again message to the right if sender is the current user , otherwise left */    var alignment =        isCurrentUser ? Alignment.centerRight : Alignment.centerLeft;  // Example timestamp    // Convert Timestamp to DateTime   /* DateTime dateTime = data["timestamp"];*/    // Format DateTime to AM/PM time    /*String formattedTime = DateFormat('h:mm a').format(dateTime);*/    return Container(      alignment: alignment,      child: Column(        crossAxisAlignment:            isCurrentUser ? CrossAxisAlignment.end : CrossAxisAlignment.start,        children: [          ChatDubble(            message: '${data["message"]}',            isCurrentUser: isCurrentUser,          ),         /* Padding(            padding: const EdgeInsets.only(right: 20),            child: Text('${formattedTime}'),          ),*/        ],      ),    );  }  /* build message input */  Widget _buildUserInput() {    return Container(        margin: EdgeInsets.only(left: 15, right: 15, bottom: 15),        child: Row(          children: <Widget>[            /* textfield should take up most of the space */ Expanded(              child: TextFormField(                controller: _messageController,                focusNode: myFocuseNode,                decoration: InputDecoration(                  suffixIcon: IconButton(                    onPressed: () {                      FocusScope.of(context).requestFocus(_focusNode);                    },                    icon: Icon(Icons.emoji_emotions_outlined),                  ),                  hintText: "Type Message...",                  border: OutlineInputBorder(                    borderRadius: BorderRadius.circular(100),                  ),                ),              ),            ),            SizedBox(              width: 20,            ),            Container(              decoration: BoxDecoration(                borderRadius: BorderRadius.circular(100),                color: Colors.blueAccent,              ),              child: IconButton(                onPressed: sendMessage,                icon: Icon(CupertinoIcons.up_arrow),              ),            )          ],        ));  }}