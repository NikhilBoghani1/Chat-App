import 'package:chat_app/models/message.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';class ChatService {/* get instance of firebase & auth */  final FirebaseFirestore _firestore = FirebaseFirestore.instance;  final FirebaseAuth _auth = FirebaseAuth.instance;/* get user stream */  Stream<List<Map<String, dynamic>>> getUserStream() {    return _firestore.collection("Users").snapshots().map((snapshot) {      return snapshot.docs.map((doc) {        /* go through each individual user */        final user = doc.data();        /* return user */        return user;      }).toList();    });  }/* send message */  Future<void> sendMessage(String receiverID, message) async {    /* get current user info */    final String currentUserID = _auth.currentUser!.uid;    final String currentEmail = _auth.currentUser!.email!;    final Timestamp timestamp = Timestamp.now();    /* create a new message */    Message newMessage = Message(      senderID: currentUserID,      senderEmail: currentEmail,      receiverID: receiverID,      message: message,      timestamp: timestamp,    );    /* construct char room ID for the two user (sorted to ensure uniquenss) */    List<String> ids = [currentUserID, receiverID];    ids.sort(); // sort the ids (this ensure the chatRoom is the same for any 2 people)    String chatRoomID = ids.join('_');    /* add new message to database */    await _firestore        .collection("chat_rooms")        .doc(chatRoomID)        .collection("message")        .add(newMessage.toMap());  }/* get message */  Stream<QuerySnapshot> getMessages(String userID, otherUserID) {    /* construvt a chatroom ID for the 2 user*/    List<String> ids = [userID, otherUserID];    ids.sort();    String chatRoomID = ids.join('_');    return _firestore        .collection("chat_rooms")        .doc(chatRoomID)        .collection("message")        .orderBy("timestamp", descending: false)        .snapshots();  }}